#!/usr/bin/env ash
# shellcheck shell=dash disable=2140,2169

PROG_VER="1.2"
#2021-08-02 1.1 -   Why are we installing stuff before the network is even up, if any packages are to be installed do it
#                   via .config at compile time, and not here
#               -   Move channels into secrets file (much easier to debug then, rather than switching between two files)
#               -   Add preliminary support for AX3000 device (although wireless interfaces are not created properly)
#               -   Move PROG_VER above the changelog for easier and more obious editing
#               -   Don't delete original wireless config, just rename it
#               -   The path of the wifi device must now be entered in the secrets file, same order as channels
#               -   Indented the output to make it more readable
#2024-02-28 1.2 -   Removed Dropbear config, as using openssh now to relieve headaches
#                   NOTE: /etc/dropbear/authorized_keys no longer required /root/.ssh/authorized_keys used instead
#2024-02-29 1.2.1 - Need to change premissions for /root/.ssh direcotry (and /root too).  Also forgot to remove
#                   watchcat's periodic reboot (only do it when internet is lost)

#If compiling your own image place:
# authorized_keys file of public keys in: <directory where git repo was cloned>/files/root/.ssh/authorized_keys
# this file in <directory where git repo was cloned>/files/etc/uci-defaults/99_apply_defaults 
# secret file of sensitive variables referenced below in <directory where git repo was cloned>/files/secrets
#  In the format SECRET_<VAR NAME>="<VALUE>" per line
# set_password.lua in <directory where git repo was cloned>/files/usr/bin/set_password.lua
# mac_hostnames in <directory where git repo was cloned>/files/mac_hostnames
#  In the format:
#config host
#    option mac 01:23:45:67:89:AB
#    option name MyDeviceNameToShowInLuci
#
#config host
#    option mac 11:AA:22:BB:33:CC
#    option name MyOtherDeviceName
# and so on

## INSTRUCTIONS:
## You can disable sections by going to the bottom of this file and placing a # (hash) before the section you don't require
## Alter the variables in the SECOND variables block to your requirements
## Create your own secrets and mac_hostnames files:
##    You can use the secrets_example and mac_hostnames-example file as a guide, remember to rename them to
#     secrets and mac_hostnames after you've edited them
## Copy the files either to the router:
##    Remove the "<directory where git repo was cloned>/files" from the locations above to get the locations they should go on
##    the router e.g. authorized keys would go to /etc/dropbear/authorized_keys) 
## If Compiling your own image:
##    Use the locations above without alteration

##VARIABLES
##### DO NOT alter the variables in this section, or the script may malfunction
##### DO alter the varaibles in the section after this though
#load secrets file
. /secrets
# shellcheck disable=2034
TRUE="1"
# shellcheck disable=2034
FALSE="0"
CHANNELS=""
PROG_DESC="OpenWRT multiple Wireless Access Points automated setup version"
AUTHOR_NAME="Alex Wood"
AUTHOR_EMAIL="alex@alex-wood.org.uk"

##### Please edit the vaiable below to your requirements
NORMAL_SERVICES_TO_DISABLE="miniupnpd dnscrypt-proxy adblock https-dns-proxy acme"
SPECIAL_SERVICES_TO_DISABLE="dnsmasq odhcpd"
TIMEZONE="Europe/London"
TIMEZONE_DST_INFO="GMT0BST,M3.5.0/1,M10.5.0"
NTP_SERVERS="0.uk.pool.ntp.org ntp1.npl.co.uk ntp2c.mcc.ac.uk 0.openwrt.pool.ntp.org"
NET_MASK="${SECRET_NET_MASK}"
ROUTER_IP="${SECRET_ROUTER_IP}"
BEDROOM_AP_MAC="${SECRET_BEDROOM_AP_MAC}"
BEDROOM_AP_HOSTNAME="${SECRET_BEDROOM_AP_HOSTNAME}"
BEDROOM_AP_IP_END="${SECRET_BEDROOM_AP_IP_END}"
BEDROOM_AP_CHANNELS="${SECRET_BEDROOM_AP_CHANNELS}"
BEDROOM_AP_PATHS="${SECRET_BEDROOM_AP_PATHS}"
LIVING_ROOM_AP_MAC="${SECRET_LIVING_ROOM_AP_MAC}"
LIVING_ROOM_AP_HOSTNAME="${SECRET_LIVING_ROOM_AP_HOSTNAME}"
LIVING_ROOM_AP_IP_END="${SECRET_LIVING_ROOM_AP_IP_END}"
LIVING_ROOM_AP_CHANNELS="${SECRET_LIVING_ROOM_AP_CHANNELS}"
LIVING_ROOM_AP_PATHS="${SECRET_LIVING_ROOM_AP_PATHS}"
AX_AP_MAC="${SECRET_AX_AP_MAC}"
AX_AP_HOSTNAME="${SECRET_AX_AP_HOSTNAME}"
AX_AP_IP_END="${SECRET_AX_AP_IP_END}"
AX_AP_CHANNELS="${SECRET_AX_AP_CHANNELS}"
AX_AP_PATHS="${SECRET_AX_AP_PATHS}"
COUNTRY_CODE="GB"
SSID="${SECRET_SSID}"
WIFI_PASSPHRASE="${SECRET_WIFI_PASSPHRASE}"
WEBUI_ROOT_PASSWORD="${SECRET_WEBUI_ROOT_PASSWORD}"
APPS_TO_INSTALL="" #less logger more"
## **** IMPORTANT: SEE NOTES IN LEDS SECTION ~ LINE 510 ****
SETUP_LEDS="${TRUE}"
INDENT="-\t"

##FUNCTIONS
#$1 name of service
disable_service()
{
    if [ -e "/etc/init.d/${1}" ]
    then
        "/etc/init.d/${1}" stop 2> /dev/null
        "/etc/init.d/${1}" disable
        echo -e "${INDENT}${1} service disabled"
    fi
}

# $1 Channel to set the Wifi to
setup_wifi_device()
{
    local WIFI_CHANNEL="${1}"
    local WIFI_PATH="${2}"
    echo -e "${INDENT}Setting up wifi device at path ${WIFI_PATH} on channel ${WIFI_CHANNEL}"
#    uci set wireless.radio${COUNTER}="wifi-device"
#    uci set wireless.radio${COUNTER}.type='mac80211'
    #don;t have any old non-n/ac devices in the network
    uci set "wireless.radio${COUNTER}.legacy_rates"='0'
    uci set "wireless.radio${COUNTER}.channel"="${WIFI_CHANNEL}"
    uci set "wireless.radio${COUNTER}.country"="${COUNTRY_CODE}"
    #820.11h doth tries to prevent interference from other radio sources
    uci set "wireless.radio${COUNTER}.doth"='1'
    #speed up wifi: wmm manages media streams, ff is frast frames, bursting is fram bursting and compression is compression
    uci set "wireless.radio${COUNTER}.wmm"='1'
    uci set "wireless.radio${COUNTER}.ff"='1'
    uci set "wireless.radio${COUNTER}.bursting"='1'
    uci set "wireless.radio${COUNTER}.compression"='1'
   
    if [ "${WIFI_CHANNEL}" -lt "20" ]
    then
        #2.4GHz radio
        uci set "wireless.radio${COUNTER}.hwmode"='11g'
        uci set "wireless.radio${COUNTER}.path"="${WIFI_PATH}"
        uci set "wireless.radio${COUNTER}.htmode"='HT40'
        uci set "wireless.radio${COUNTER}.distance"='20'
        uci set "wireless.radio${COUNTER}.beacon_int"='500'
        echo -e "${INDENT}Setup 2.4GHz on radio${COUNTER} at path ${WIFI_PATH} using channel ${WIFI_CHANNEL}"
    else
        #5GHz radio
        uci set "wireless.radio$COUNTER.hwmode"='11a'
        uci set "wireless.radio$COUNTER.path"="${WIFI_PATH}"
        uci set "wireless.radio$COUNTER.htmode"='VHT80'
        uci set "wireless.radio$COUNTER.distance"='100'
        uci set "wireless.radio$COUNTER.beacon_int"='100'
        echo -e "${INDENT}Setup 5GHz on radio${COUNTER} at path ${WIFI_PATH} using channel ${WIFI_CHANNEL}"
    fi
    #temporarily disable radios until fully set up and encryption enabled
    uci set "wireless.radio$COUNTER.disabled"='1'
}

# $1 Physical Radio Device Name (e.g. radio0)
# $2 Network Name to bind to (e.g. lan)
# $3 SSID Name Wifi uses to broadcast
# $4 Passphrase/password for wifi
# $5 1 to hide the SSID, 0 to broadcase it (default)
setup_wifi_iface()
{
    if [ "${5}" == "0" ]
    then
        echo -e "${INDENT}Setting up radio ${1} on network/bridge ${2} with an SSID of ${3} with a password and SSID is NOT hidden"
    else
        echo -e "${INDENT}Setting up radio ${1} on network/bridge ${2} with an SSID of ${3} with a password and SSID IS hidden"
    fi
    uci -q add wireless wifi-iface >/dev/null
    uci set wireless.@wifi-iface[-1].device="${1}"
    uci set wireless.@wifi-iface[-1].mode='ap'
    uci set wireless.@wifi-iface[-1].network="${2}"
    uci set wireless.@wifi-iface[-1].ssid="${3}"
    uci set wireless.@wifi-iface[-1].key="${4}"
    uci set wireless.@wifi-iface[-1].encryption="psk2+ccmp"
    #turn on protected frames to improve encryption (although ccmp probably turns it on anyway)
    uci set wireless.@wifi-iface[-1].ieee80211w='1'
    #changes the encryption key every n secs, not sure why this is set to 0
#    uci set wireless.@wifi-iface[-1].wpa_group_rekey='0'
    uci set wireless.@wifi-iface[-1].hidden="${5:=0}"
    #allow fast ap switching on devices that support it (mainly apple)
    uci set wireless.@wifi-iface[-1].ieee80211r='1'
    ##and enable better roaming, maybe?
    uci set wireless.@wifi-iface[-1].ieee80211v='1'
    uci set wireless.@wifi-iface[-1].ieee80211k='1'
#for some reason say it is an unrecognised option (openwrt 21.02.0-rc1), leaving it commented as do need it for dawn and roaming on supported
#    uci set wireless.@wifi-iface[-1].bss_transition='1'
    uci set wireless.@wifi-iface[-1].ft_over_ds='1'
    uci set wireless.@wifi-iface[-1].ft_psk_generate_local='1'
    uci rename wireless.@wifi-iface[-1]="wifinet${1#radio}"
    echo -e "${INDENT}Setup Wifi on ${1} with SSID ${3} using bridge ${2}"
#    echo -e "Setup Wifi on ${1} with SSID ${3} with passphrase [${4}] using bridge ${2}"
}

setup_umdns()
{
    echo -e "Setting up umdns"
    uci_remove_array "umdns" "=umdns$"
    uci -q add umdns umdns >/dev/null
    uci set umdns.@umdns[-1].jail='1'
    uci add_list umdns.@umdns[-1].network='lan'
    uci add_list umdns.@umdns[-1].network='wan'
    uci commit umdns
    echo -e "umdns setup complete"
}

# $1 name of item to delete from uci
# No check for ucitrack here, assume the person knows what they are doing
uci_remove_single_item()
{
    local item_to_remove="${1}"
    #for some reason things don't always get deleted, so here's a hack (just keep on trying until it's gone)
    INDENT="-\t\t\t"
    while [ "$(uci -q show "${item_to_remove}" | wc -l)" -gt 0 ]
    do
        uci -q del "${item_to_remove}"
        echo -e "${INDENT}Deleting ${item_to_remove}, $(uci -q show "${item_to_remove}" | wc -l) left"
    done
    INDENT="-\t\t"
    uci commit "${item_to_remove%%.*}"
    echo -e "${INDENT}${item_to_remove} deleted"
}

# $1 array item to delete from uci
# $2 test string to use to determine if items are deleted (usually just =<name of array>$)
#    which can be =umdns$ for all items in umdns.umdns[i] or frogs in all items in tardis.frogs[i]
# Does not alter ucitrack, which informas LuCi of what config files do what
uci_remove_array()
{
    local item_to_delete="${1}"
    local test_string="${2}"
    # for ((i=0 ; i<5 ; i++)) dash doesn;t do c style for loops, grrr
    #for some reason the delete command doesn't always work, so here's a hack (just keep on deleting until there are none left)
    INDENT="-\t\t\t"
    while [ "$(uci -q show "${item_to_delete}" | grep -v "^ucitrack." | grep -c "${test_string}")" -gt 0 ]
    do
        uci -q show "${item_to_delete}" | grep "${test_string}" | grep -v "^ucitrack." | awk -F '=' '{ print $1 }' | while read -r ITEM
        do
            echo -e "${INDENT}Deleting ${ITEM}, $(uci -q show "${item_to_delete}" | grep -v "^ucitrack." | grep -c "${test_string}") left"
            uci -q delete "${ITEM}"
            #uci -q delete ntpclient.@ntpclient[-1]
        done
        uci commit "${item_to_delete%%.*}"
    done
    INDENT="-\t\t"
    echo -e "${INDENT}${item_to_delete} has been deleted"
}

disable_normal_services()
{
    echo -e "Disabling Normal Services..."
    #disable currently unneeded services (which don't need specific code to disable them)
    for SERVICE in ${NORMAL_SERVICES_TO_DISABLE}
    do
        disable_service "${SERVICE}"
    done
    echo -e "Normal services disabled"
}

setup_NTP()
{
    echo -e "Setting up NTP and Chrony"
    ##Setup NTP and Chrony

    echo -e "${INDENT}NTP setup..."
    INDENT="-\t\t"
    uci_remove_single_item "system.ntp.server"
    uci set system.@system[0].timezone="${TIMEZONE_DST_INFO}"
    uci set system.@system[0].zonename="${TIMEZONE}"
    #uci set system.ntp="timeserver"
    for SERVER in ${NTP_SERVERS}
    do
        uci -q add_list system.ntp.server="${SERVER}"
        echo -e "${INDENT}Added ${SERVER} to ntp"
    done
    uci set system.ntp.enable_server='1'
    uci commit system

    INDENT="-\t"
    echo -e "${INDENT}NTP client setup..."
    INDENT="-\t\t"
    #make sure no other ntp configs are set
    uci_remove_array "ntpclient" "=ntpserver$"
    uci_remove_array "ntpclient" "=ntpclient$"
    uci_remove_array "ntpclient" "=ntpdrift$"

    for SERVER in ${NTP_SERVERS}
    do
        uci -q add ntpclient ntpserver >/dev/null
    #    uci set ntpclient.@ntpserver[-1]="ntpserver"
        uci set ntpclient.@ntpserver[-1].hostname="${SERVER}"
        echo -e "${INDENT}Added ${SERVER} to ntpclient"
        uci set ntpclient.@ntpserver[-1].port='123'
    done

    uci -q add ntpclient ntpclient >/dev/null
    #uci set ntpclient.@ntpclient[-1]="ntpclient"
    uci set ntpclient.@ntpclient[-1].interval='600'
    uci -q add ntpclient ntpdrift >/dev/null
    uci set ntpclient.@ntpdrift[-1]=ntpdrift
    uci set ntpclient.@ntpdrift[-1].freq='0'
    uci commit ntpclient

    INDENT="-\t"
    echo -e "Chrony setup..."
    INDENT="-\t\t"

    uci_remove_array "chrony" "=pool$"
    uci_remove_array "chrony" "=dhcp_ntp_server$"
    uci_remove_array "chrony" "=makestep$"
    uci_remove_array "chrony" "=allow$"

    uci -q add chrony dhcp_ntp_server >/dev/null
    #uci set chrony.@dhcp_ntp_server[-1]="dhcp_ntp_server"
    uci set chrony.@dhcp_ntp_server[-1].iburst='yes'

    for SERVER in ${NTP_SERVERS}
    do
        uci -q add chrony pool >/dev/null
    #    uci set chrony.@pool[-1]=pool
        uci set chrony.@pool[-1].hostname="${SERVER}"
        echo -e "${INDENT}Added ${SERVER} to Chrony"
        uci set chrony.@pool[-1].maxpoll='12'
        uci set chrony.@pool[-1].iburst='yes'
    done

    uci -q add chrony makestep >/dev/null
    #uci set chrony.@makestep[-1]=makestep
    uci set chrony.@makestep[-1].limit='3'
    uci set chrony.@makestep[-1].threshold='1.0'
    uci -q add chrony allow >/dev/null
    #uci set chrony.@allow[-1]=allow
    uci set chrony.@allow[-1].interface='lan'
    uci commit chrony
    INDENT="-\t"
    echo -e "NTP and Chrony setup complete"
}

setup_LEDs()
{
    echo -e "Setting up LEDs..."
    #Setup LEDS
    #make sure no other LED configs are set
    uci_remove_array "system" "=led$"

    #pre-named that are system defaults
    #for ((i=1; i<=3; i++)) dash doesn;t do c style for loops, grrr
    i=1
    mask=2
    #should really get the number of ports from somewhere better than this
    while [ "${i}" -le "$(uci -q show network.lan.ifname | awk -F "'" '{ print $2 }' | sed -e 's/wan//g' | wc -w)" ]
    do
        uci set system.led_lan${i}_amber=led
        uci set "system.led_lan${i}_amber.speed_mask"='0x08'
        uci set "system.led_lan${i}_amber.trigger"='switch0'
        uci set "system.led_lan${i}_amber.name"="LAN${i} (amber)"
        uci set "system.led_lan${i}_amber.sysfs"="mir3p:amber:lan${i}"
        # dash doesn;t support exponents (well it does, but shellcheck doesn;t seem to know that,
        # and bc or dc are not installed by default grrrreeaaaggghhh
        #uci set "system.led_lan${i}_amber.port_mask"="0x0$((i=2**i))"
        uci set "system.led_lan${i}_amber.port_mask"="0x0${mask}"
        mask=$((mask*2))
        _=$((i=i+1))
    done
    unset i
    unset mask

    uci set system.led_wan_amber=led
    uci set system.led_wan_amber.speed_mask='0x08'
    uci set system.led_wan_amber.trigger='switch0'
    uci set system.led_wan_amber.name='WAN (amber)'
    uci set system.led_wan_amber.sysfs='mir3p:amber:wan'
    uci set system.led_wan_amber.port_mask='0x10'
    uci commit system

    #and set up the front led indicator
    #a for loop would be nice here, but the name and colour choice mean it would be more complex than just straight code
    #could use associatlive arrays, but again, too complicated and we need three unique things per loop - name sysfs and trigger
    uci -q add system led >/dev/null
    uci set system.@led[-1].name='wlan0data'
    uci set system.@led[-1].sysfs='mir3p:yellow:status'
    uci set system.@led[-1].default='0'
    uci set system.@led[-1].trigger='phy0radio'

    uci -q add system led >/dev/null
    uci set system.@led[-1].name='wlan1data'
    uci set system.@led[-1].sysfs='mir3p:blue:status'
    uci set system.@led[-1].default='0'
    uci set system.@led[-1].trigger='phy1radio'

    uci -q add system led >/dev/null
    uci set system.@led[-1].name='wlan0assoc'
    uci set system.@led[-1].sysfs='mir3p:red:status'
    uci set system.@led[-1].default='0'
    uci set system.@led[-1].trigger='phy0assoc'

    uci -q add system led >/dev/null
    uci set system.@led[-1].name='wlan1assoc'
    uci set system.@led[-1].sysfs='mir3p:red:status'
    uci set system.@led[-1].default='0'
    uci set system.@led[-1].trigger='phy1assoc'
    uci commit system
    echo -e "${INDENT}$(uci -q show system | grep -c "=led$") LED configs created"
    echo -e "LEDs setup complete"
}

setup_LAN()
{
    echo -e "Setting up LAN..."
    #Set up lan ports
    uci set network.lan.type='bridge'
    #add the wan port to the lan ports, as we'll be using it as a lan port
    #(configured below, as if we delete it first, we can't grab it from uci here)
#    if [ "$(uci -q get network.lan.ifname)" == "" ]
#    then
        local numberOfLANinterfaces=$(ip addr | cut -d ' ' -f 2 | cut -d@ -f1 | grep -v wlan | grep -v br-lan | grep -v lo | grep -v eth0 | grep -v wan | grep -cve "^$")
        local interfaces=""
        echo -e "${INDENT}Bridge not set up, adding lan interfaces"
        for interface in $(seq 1 ${numberOfLANinterfaces})
        do
            if [ "${interfaces}" == "" ]
            then
                interfaces="lan${interface}"
            else
                interfaces="${interfaces} lan${interface}"
            fi
            echo -e "${INDENT}\tAdded lan${inferface}..."
        done
    uci set network.lan.ifname="${interfaces}"
#    fi
    if [ "$(uci -q get network.wan.ifname)" != "" ]
    then
        uci set network.lan.ifname="$(uci get network.lan.ifname) $(uci get network.wan.ifname)"
        echo -e "${INDENT}Bridge setup with interfaces $(uci get network.lan.ifname) - [$(uci get network.wan.ifname)] was added"
    else
        uci set network.lan.ifname="$(uci get network.lan.ifname) wan"
        echo -e "${INDENT}WAN interface not found during bridge setup, assuming default of wan"
    fi

    uci set network.lan.proto='static'
    uci set network.lan.netmask="${NET_MASK}"
    uci set network.lan.gateway="${ROUTER_IP}"
    uci set network.lan.broadcast="${ROUTER_IP%.*}.255"

    #we have multiple access points, there is the remote possibility of a 'loop' forming 
    #(the same device could eb connected to different band on different AP for example), so stop it
    uci set network.lan.stp='1'
    #we don't use ip6 yet (really should look into using this internally though)
    uci set network.lan.delegate='0'

    uci_remove_single_item "network.lan.ip6assign"

    #the main router does all the dns stuff
    uci_remove_single_item "network.lan.dns"

    uci -q add_list network.lan.dns="${ROUTER_IP}"

    # Remove wan logical interface, since we will not need it.
    uci_remove_single_item "network.wan.ifname"

    uci_remove_single_item "network.wan6.ifname"

    uci_remove_single_item "network.wan"

    uci_remove_single_item "network.wan6"

    uci commit network

    echo -e "LAN ports setup complete"
}

setup_specifics()
{
    #Setup router specific stuff using the mac on each router to identify it
    #or could do: cat /sys/class/net/eth0/address NOTE:will return it in lower case
    case "$(ifconfig eth0 | awk '/^[a-z]/ { print $NF; exit; }')" in
      "${BEDROOM_AP_MAC}")
        echo -e "${INDENT}Using specific config for Bedroom AP"
        uci set network.lan.ipaddr="${ROUTER_IP%.*}.${BEDROOM_AP_IP_END}"
        uci set network.lan.hostname="${BEDROOM_AP_HOSTNAME}"
        uci commit network
        uci set system.@system[0].hostname="${BEDROOM_AP_HOSTNAME}"
        uci commit system
        CHANNELS="${BEDROOM_AP_CHANNELS}"
        PATHS="${BEDROOM_AP_PATHS}"
        ;;
      "${LIVING_ROOM_AP_MAC}")
        echo -e "${INDENT}Using specific config for Living Room AP"
        uci set network.lan.ipaddr="${ROUTER_IP%.*}.${LIVING_ROOM_AP_IP_END}"
        uci set network.lan.hostname="${LIVING_ROOM_AP_HOSTNAME}"
        uci commit network
        uci set system.@system[0].hostname="${LIVING_ROOM_AP_HOSTNAME}"
        uci commit system
        CHANNELS="${LIVING_ROOM_AP_CHANNELS}"
        PATHS="${LIVING_ROOM_AP_PATHS}"
        ;;
      "${AX_AP_MAC}")
        echo -e "${INDENT}Using specific config for AX AP"
        uci set network.lan.ipaddr="${ROUTER_IP%.*}.${AX_AP_IP_END}"
        uci set network.lan.hostname="${AX_AP_HOSTNAME}"
        uci commit network
        uci set system.@system[0].hostname="${AX_AP_HOSTNAME}"
        uci commit system
        CHANNELS="${AX_AP_CHANNELS}"
        PATHS="${AX_AP_PATHS}"
        ;;
        *)
        echo -e "ERROR: Unknown mac address [$(ifconfig eth0 | awk '/^[a-z]/ { print $NF; exit; }')] knwon values are:"
        echo -e "      Bedroom AP:     [${BEDROOM_AP_MAC}]"
        echo -e "      Living Room AP: [${LIVING_ROOM_AP_MAC}]"
        echo -e "      AX AP:          [${AX_AP_MAC}]"
        ;;
    esac
}

setup_wifi()
{
    echo -e "Setting up wireless..."
    # Wipe out any previous wifi settings
    #echo '' >|"/etc/config/wireless"
    mv "/etc/config/wireless" "/etc/config/wireless.orig"
    echo -e "${INDENT}Generating default wifi config.."
    wifi config
    uci commit wireless

    ### Set up physical radios
    COUNTER=0
    #above we set the channels in the specific order of the physical radiosn, this is important here
    for CHANNEL in ${CHANNELS}
    do
        PATH_COUNTER=0
        DEVICE_PATH=""
        for WIFI_DEVICE_PATH in ${PATHS}
        do
            if [ ${PATH_COUNTER} -eq ${COUNTER} ]
            then
                    DEVICE_PATH="${WIFI_DEVICE_PATH}"
                    break
            fi
            _=$((PATH_COUNTER=PATH_COUNTER+1))
        done
        echo -e "${INDENT}Setting up wifi device number ${COUNTER} at path ${DEVICE_PATH} on channel ${CHANNEL}"
        setup_wifi_device "${CHANNEL}" "${DEVICE_PATH}"
        _=$((COUNTER=COUNTER+1))
    done
    uci commit wireless

    # Delete existing SSIDs
    uci_remove_array "wireless" "=wifi-iface$"

    uci -q show wireless | grep "\.radio.=" | awk -F '.' '{ print $2}' | awk -F '=' '{ print $1 }' | while read -r RADIO
    do
    echo -e "${INDENT}Setting up Wireless interface on radio ${RADIO}"
    #   setup_wifi_iface "$RADIO"	NETWORK	SSID			PASSWORD		        HIDDEN
        setup_wifi_iface "$RADIO"	"lan"	"${SSID}"       "${WIFI_PASSPHRASE}"    "0"
    #   setup_wifi_iface "$RADIO"	"guest"	"guest-ssid"	"guest-passphrase"	    "0"
        #all set up now, enable wifi
        uci set "wireless.$RADIO.disabled"="0"
    done
    uci commit wireless
    echo -e "Wireless Setup Complete"
}

setup_luci()
{
    echo -e "Setting up LUCI..."
    #Set up luci's langugage, will probably be english by default, but never mind
    uci set luci.languages.en='English'
    uci set luci.main.lang='en'
    uci set luci.flash_keep.passwd='/etc/passwd'
    # 1.2# uci set luci.flash_keep.dropbear='/etc/dropbear/'
    uci set luci.flash_keep.uci='/etc/config/'
    uci commit luci
    echo -e "LUCI setup complete"
}

setup_dropbear()
{
    echo -e "Setting up Dropbear..."
    #Setup ssh to only use ssh keys (place authorized_keys file containing a list of public key in /etc/dropbear/authorized_keys
    #unless mcompiling your own, then follow instruction at top of this file
    uci_remove_array "dropbear" "=dropbear$"

    uci -q add dropbear dropbear >/dev/null
    #uci set dropbear.@dropbear[-1]=dropbear
    uci set dropbear.@dropbear[-1].Interface='lan'
    uci set dropbear.@dropbear[-1].Port='22'
    uci set dropbear.@dropbear[-1].PasswordAuth='off'
    uci commit dropbear
    echo -e "Dropbear setup complete"
}

setup_watchcat()
{
    echo -e "Setting up WatchCat..."

    #remove default config
    #DON'T THINK THIS WORKING FOR SOME REASON
    #AS OLD CONFIG REMAINS, SO LOTS OF DUPLICATES
    uci_remove_array "system" "=watchcat$"

    #if there's no internet (ping google.com) for 5m, reboot
    uci -q add system watchcat >/dev/null
    uci set system.@watchcat[-1].mode='ping_reboot'
    uci set system.@watchcat[-1].period='5m'
    uci set system.@watchcat[-1].forcedelay='30'
    uci set system.@watchcat[-1].pinghosts='8.8.8.8'
    uci set system.@watchcat[-1].pingperiod='30s'
    uci set system.@watchcat[-1].pingsize='standard'
    uci set system.@watchcat[-1].interface='br-lan'

    #every 12 hours reboot (for some reason, after a while wifi is still active, but devices can't use internet)
    #1.2.1 No need for this anymore, and it;s annoying when it happens
#    uci -q add system watchcat >/dev/null
#    uci set system.@watchcat[-1].mode='periodic_reboot'
#    uci set system.@watchcat[-1].period='12h'
#    uci set system.@watchcat[-1].forcedelay='0'

    uci commit system
    echo -e "WatchCat setup complete"
}

disable_DHCP()
{
    echo -e "Removing DHCP..."
    #Turn off DHCP, as the main router will do this for us
    uci_remove_array "dhcp.odhcpd" "=odhcpd$"

    #uci set dhcp.lan.interface='lan'
    #uci set dhcp.lan.ignore='1'
    #uci -q delete dhcp.lan.ra
    #uci -q delete dhcp.lan.dhcpv6
    #uci -q delete dhcp.lan.ndp
    #uci -q delete dhcp.lan.ra_management
    #uci -q delete dhcp.lan.ra_slaac
    #uci -q delete dhcp.lan.ra_flags

    uci_remove_array "dhcp" "=dhcp$"

    uci_remove_array "dhcp" "=dnsmasq$"

    # Disable Dnsmasq completely (it is important to commit or discard dhcp)
    uci commit dhcp
    #echo '' >|"/etc/config/dhcp"
    for SERVICE in ${SPECIAL_SERVICES_TO_DISABLE}
    do
        disable_service "${SERVICE}"
    done
    echo -e "DHCP disabled"
}

setup_final()
{
    echo -e "Final setup..."
    #echo -e "192.168.16.22 dashboard.alex-wood.org.uk controller.alex-wood.org.uk radius.alex-wood.org.uk topology.alex-wood.org.uk" | tee -a /etc/hosts

    #1.2.1 Need to change permissions of /root and /root.ssh to allow openssh to work
    chmod 755 /root #shocked this was not tjis by default
    chmod 700 /root/.ssh
    chmod 600 /root/.ssh/*.* #config, authorized_keys, known_hosts  and private keys
    chmod 644 /root/.ssh/*.pub  #change back public key to world READable

    sed -i '10a\export TERM=xterm-color' "/etc/profile"

    echo -e "${INDENT}Setting webui root Password..."
    lua /usr/bin/set_password.lua root "${WEBUI_ROOT_PASSWORD}" &>/dev/null

#    echo -e "Installing Packages..."
#    opkg update &>/dev/null
#    # shellcheck disable=SC2086
#    opkg --force-overwrite install ${APPS_TO_INSTALL}

    echo -e "${INDENT}Adding descriptive hostnames make all the mac addresses in LuCi easier to understand..."
    cat /mac_hostnames >> /etc/config/dhcp

    echo -e "${INDENT}Syncing and restarting network (will take a few seconds)..."
    sync
    /etc/init.d/network restart
    echo -e "Setup Complete"
}
echo -e "Functions and Variables loaded"

##MAIN CODE
echo -e "Main Program START: ${PROG_DESC} version ${PROG_VER} by ${AUTHOR_NAME} (${AUTHOR_EMAIL})"
disable_normal_services
setup_NTP

#WARNING: the LEDS section is very specific to Xiaomi Router 3 Pro, it will not work with anything else,
# and you will need to alter the name of sysfs at least, possibly the switch and possibly the mask and
# how it is calculated for your own router.  So either do not enable this section if you don't have a 
# Xiaomi Router 3 Pro or edit it for your router
if [ "${SETUP_LEDS}" == "${TRUE}" ]
then
    setup_LEDs
fi

#ALWAYS do lan before wifi, as it figures out the right channels, etc for the device
#setup_LAN #using /etc/config/network file (cop-out, I know)
setup_specifics
#setup_wifi #using /etc/config/wireless file (another cop-out)
setup_umdns
setup_luci
#1.2 #setup_dropbear
setup_watchcat
disable_DHCP
setup_final

echo -e "Main Program END: ${PROG_DESC} version ${PROG_VER} by ${AUTHOR_NAME} (${AUTHOR_EMAIL})"
