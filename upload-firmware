#!/usr/bin/env bash

. "${PWD}/commonfunctions"

declare -r BEDROOM_AP_IP="192.168.16.3"
declare -r LIVING_AP_IP="192.168.16.4"
declare -r FIRMWARE_LOCATION="${HOME}/git/openwrt/bin/targets/ramips/mt7621"
declare -r KNOWN_HOSTS_FILE="${HOME}/.ssh/known_hosts"
declare -r FIRMWARE_MATCH_PATTERN="*sysupgrade.bin"
declare -r UPLOADED_FIRMWARE_FILENAME="/sysupgrade.bin"
declare -r -i ERROR_NO_TARGET_SUPPLIED=101
declare -r -i ERROR_MULTIPLE_FIRMWARES_FOUND=102
declare -r PROG_NAME="uploadFirmware"
declare -r PROG_VER="1.0"
declare -r AUTHOR="Alex Wood"
declare -r AUTHOR_EMAIL="alex@alex-wood.org.uk"
declare _PRINT_HELP=no

#
# This is a positional arguments-only example of Argbash potential
#
# ARG_HELP([Uploads a firmware file to the router and applies it.])
# ARG_VERSION([echo "${PROG_NAME} v${PROG_VER} by ${AUTHOR} (${AUTHOR_EMAIL})"])
# ARG_VERBOSE([])
# ARG_POSITIONAL_SINGLE([target],[Router to update firmware of])
# ARG_TYPE_GROUP_SET([routers],[ROUTER],[target],[bedroom,Bedroom,living,Living])
# ARGBASH_SET_INDENT([    ])
#
#
#
#
# ARGBASH_GO()
# needed because of Argbash --> m4_ignore([
### START OF CODE GENERATED BY Argbash v2.8.1 one line above ###
# Argbash is a bash code generator used to get arguments parsing right.
# Argbash is FREE SOFTWARE, see https://argbash.io for more info


die()
{
    local _ret="${2:-1}"
    test "${_PRINT_HELP:-no}" = yes && print_help >&2
    echo "$1" >&2
    exit "${_ret}"
}

# validators

routers()
{
	local _allowed=("bedroom" "Bedroom" "living" "Living") _seeking="$1"
	for element in "${_allowed[@]}"
	do
		test "$element" = "$_seeking" && echo "$element" && return 0
	done
	die "Value '$_seeking' (of argument '$2') doesn't match the list of allowed values: 'bedroom', 'Bedroom', 'living' and 'Living'" 4
}


begins_with_short_option()
{
    local first_option all_short_options='hv'
    first_option="${1:0:1}"
    test "$all_short_options" = "${all_short_options/$first_option/}" && return 1 || return 0
}

# THE DEFAULTS INITIALIZATION - POSITIONALS
_positionals=()
# THE DEFAULTS INITIALIZATION - OPTIONALS
_arg_verbose=0


print_help()
{
    printf '%s\n' "Uploads a firmware file to the router and applies it."
    printf 'Usage: %s [-h|--help] [-v|--version] [--verbose] <target>\n' "$0"
    printf '\t%s\n' "<target>: Router to update firmware of. Can be one of: 'bedroom', 'Bedroom', 'living' and 'Living'"
    printf '\t%s\n' "-h, --help: Prints help"
    printf '\t%s\n' "-v, --version: Prints version"
    printf '\t%s\n' "--verbose: Set verbose output (can be specified multiple times to increase the effect)"
}


parse_commandline()
{
    _positionals_count=0
    while test $# -gt 0
    do
        _key="$1"
        case "$_key" in
            -h|--help)
                print_help
                exit 0
                ;;
            -h*)
                print_help
                exit 0
                ;;
            -v|--version)
                echo "${PROG_NAME} v${PROG_VER} by ${AUTHOR} (${AUTHOR_EMAIL})"
                exit 0
                ;;
            -v*)
                echo "${PROG_NAME} v${PROG_VER} by ${AUTHOR} (${AUTHOR_EMAIL})"
                exit 0
                ;;
            --verbose)
                _arg_verbose=$((_arg_verbose + 1))
                ;;
            *)
                _last_positional="$1"
                _positionals+=("$_last_positional")
                _positionals_count=$((_positionals_count + 1))
                ;;
        esac
        shift
    done
}


handle_passed_args_count()
{
    local _required_args_string="'target'"
    test "${_positionals_count}" -ge 1 || _PRINT_HELP=yes die "FATAL ERROR: Not enough positional arguments - we require exactly 1 (namely: $_required_args_string), but got only ${_positionals_count}." 1
    test "${_positionals_count}" -le 1 || _PRINT_HELP=yes die "FATAL ERROR: There were spurious positional arguments --- we expect exactly 1 (namely: $_required_args_string), but got ${_positionals_count} (the last one was: '${_last_positional}')." 1
}


assign_positional_args()
{
    local _positional_name _shift_for=$1
    _positional_names="_arg_target "

    shift "$_shift_for"
    for _positional_name in ${_positional_names}
    do
        test $# -gt 0 || break
        eval "$_positional_name=\${1}" || die "Error during argument parsing, possibly an Argbash bug." 1
        shift
    done
}

parse_commandline "$@"
handle_passed_args_count
assign_positional_args 1 "${_positionals[@]}"

# OTHER STUFF GENERATED BY Argbash
# Validation of values
_arg_target="$(routers "$_arg_target" "target")" || exit 1


### END OF CODE GENERATED BY Argbash (sortof) ### ])
# [ <-- needed because of Argbash


infoText "Main Code Start[${PROG_NAME} v${PROG_VER} by ${AUTHOR} (${AUTHOR_EMAIL})]" ${INFO_TEXT_MISC_NO_DOTS}

#get the right ip
case "${_arg_target}" in
    "bedroom"|"Bedroom")
        IP="${BEDROOM_AP_IP}"
        ;;
    "living"|"Living")
        IP="${LIVING_AP_IP}"
        ;;
    *)
        errorText "ERROR: incorrect target supplied. Should be either bedroom or living, you supplied [$@]"
        _PRINT_HELP=yes die "ERROR: incorrect target supplied. Should be either bedroom or living, you supplied [$@]" ${ERROR_BAD_ARGUMENT}
        ;;
esac

#Remove the old known hosts value for the router as it will have changed with the firmware update
ssh-keygen -f "${KNOWN_HOSTS_FILE}" -R "${IP}" &>/dev/null
#${SSH_KEYGEN} -f "${KNOWN_HOSTS_FILE}" -R "${IP}" &>/dev/null
firmwareFile=$(find "${FIRMWARE_LOCATION}" -iname "${FIRMWARE_MATCH_PATTERN}")
#firmwareFile=$(${FIND} "${FIRMWARE_LOCATION}" -iname "${FIRMWARE_MATCH_PATTERN}")

if [ "$(echo "${firmwareFile}" | wc -l)" -gt 1 ]
then
    errorText "ERROR: Multiple sysupgrade files found, please remove all but the one you want from [${FIRMWARE_LOCATION}]"
    _PRINT_HELP=no die "ERROR: Multiple sysupgrade files found, please remove all but the one you want from [${FIRMWARE_LOCATION}]" ${ERROR_MULTIPLE_FIRMWARES_FOUND}
fi

if [ "$(echo "${firmwareFile}" | wc -l)" -lt 1 ]
then
    errorText "ERROR: No sysupgrade files found, please check one exists in [${FIRMWARE_LOCATION}]"
    _PRINT_HELP=no die "ERROR: No sysupgrade files found, please check one exists in [${FIRMWARE_LOCATION}]" ${ERROR_FILE_MISSING}
fi

infoText "Uploading firmware" ${INFO_TEXT_MISC}
echo -e "yes\n" | scp "${firmwareFile}" "${IP}:${UPLOADED_FIRMWARE_FILENAME}"
#${SCP} "${firmwareFile}" "${IP}:${UPLOADED_FIRMWARE_FILENAME}"
infoText "firmware" ${INFO_TEXT_APPLY}
ssh "${IP}" "sysupgrade -n ${UPLOADED_FIRMWARE_FILENAME}"
#${SSH} "${IP}" "sysupgrade -n -F ${UPLOADED_FIRMWARE_FILENAME}"
warnText "Please wait a few minutes for the firmware to update, then goto ${IP} in your browser and load Network->Wireless after login"

# ] <-- needed because of Argbash
